start$: $subscribe(subscribeParams)
name: nozzleWork
subscribeParams: #parameters for subscribing to a cloud event
  source: cloudEvent
  testData: "${ [1].([{'messageId': $, 'name': 'nozzleTime', 'order':$}]) }"
  type: 'my-topic'
  filter$: function($e){ $e.name='nozzleTime' }
  to: ../${myWorkflow$}
  parallelism: 2
  subscriberId: ../${name}
myWorkflow$: |
  function($e){(
    $e ~> |$|{'parentId': 'myWorkflow', 'data': $e}|;
    $e ~> $serial([step1, step2, parallelStep$],
            {
              'name': "${ $$.name }", 
              'log': $$.log,
              'parentId': 'myWorkflow'
            });
  )}
parallelStep$:
  name: parallelStep, 
  function: | 
    /${ function($e){(
      $console.log('parallelStep received - ' & $string($e) & ' from "' & 'domain-event-bus' & '"');
      $e ~> $serial([step1, step2],
              {
                'name': name, 
                'log': log,
              }) 
    )}}
step1:
  name: primeTheNozzle
  function: |
    /${ function($e){(
      $console.log('step1 received - ' & $string($e) & ' from "' & 'domain-event-bus' & '"');
      $e~>|$|{'primed':true}|;
    )}  }
step2:
  name: sprayTheNozzle
  function: |
    /${ function($e){(
      $console.log('step2 received - ' & $string($e) & ' from "' & 'domain-event-bus' & '"');
      $e ~>|$|{'sprayed': true}|;
    )}  }
log:
  retention:
    maxWorkflowLogs: 100






